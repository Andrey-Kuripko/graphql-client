name: Main workflow
on: [push, pull_request]
jobs:
  generateVersionInfo:  
    name: GenerateVersionInfo
    runs-on: windows-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Setup dotnet environment
      uses: actions/setup-dotnet@master
      with:
        dotnet-version: '3.1.100'
    - name: Restore dotnet tools
      run: dotnet tool restore
    - name: Fetch complete repository 
      run: git fetch
    - name: Generate version info from git history
      run: dotnet dotnet-gitversion /output json | Out-File gitversion.json; Get-Content gitversion.json
    - name: Upload version info file
      uses: actions/upload-artifact@v1
      with:
        name: gitversion
        path: gitversion.json

  build:
    name: Build
    needs: generateVersionInfo
    runs-on: windows-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Setup dotnet environment
      uses: actions/setup-dotnet@master
      with:
        dotnet-version: '3.1.100'
    - name: Download version info file
      uses: actions/download-artifact@v1
      with:
        name: gitversion
        path: ./
    - name: Inject version info into environment
      run: Get-Content gitversion.json | ConvertFrom-Json | ForEach-Object { foreach ($item in $_.PSObject.properties) { "::set-env name=GitVersion_$($item.Name)::$($item.Value)" } }; $env:GitVersion_SemVer
    - name: Build solution
      run: dotnet build -c Release

  test:
    name: Test
    needs: [build, generateVersionInfo]
    runs-on: windows-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Setup dotnet environment
      uses: actions/setup-dotnet@master
      with:
        dotnet-version: '3.1.100'
    - name: Download version info file
      uses: actions/download-artifact@v1
      with:
        name: gitversion
        path: ./
    - name: Inject version info into environment
      run: Get-Content gitversion.json | ConvertFrom-Json | ForEach-Object { foreach ($item in $_.PSObject.properties) { "::set-env name=GitVersion_$($item.Name)::$($item.Value)" } }
    - name: Run tests
      run: dotnet test -c Release -p:ParallelizeTestCollections=false

  publish:
    name: Publish
    needs: [test, generateVersionInfo]
    runs-on: windows-latest
    env:
      NUGET_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}
    steps:
    - uses: actions/checkout@v2
    - run: $owner = Split-Path -Path $env:GITHUB_REPOSITORY; "::set-env name=OWNER::$($owner)"
    - uses: actions/setup-dotnet@master
      with:
        dotnet-version: '3.1.100'
        source-url: https://nuget.pkg.github.com/${{env.OWNER}}/index.json      
    - uses: actions/download-artifact@v1
      with:
        name: gitversion
        path: ./
    - run: Get-Content gitversion.json | ConvertFrom-Json | ForEach-Object { foreach ($item in $_.PSObject.properties) { "::set-env name=GitVersion_$($item.Name)::$($item.Value)" } }
    - run: dotnet build -c Release
    - run: dotnet nuget push ./src/GraphQL.Primitives/bin/Release/GraphQL.Primitives.*.nupkg
    - run: dotnet nuget push ./src/GraphQL.Client/bin/Release/GraphQL.Client.*.nupkg
    - run: dotnet nuget push ./src/GraphQL.Client.Http/bin/Release/GraphQL.Client.Http.*.nupkg
