name: Main workflow
on: [push]
jobs:
  generateVersionInfo:  
    name: GenerateVersionInfo
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - uses: actions/setup-dotnet@master
      with:
        dotnet-version: '3.1.100'
    - run: dotnet tool restore
    - run: git fetch
    - run: dotnet dotnet-gitversion /output json | Out-File gitversion.json
    - run: Get-Content gitversion.json
    - uses: actions/upload-artifact@v1
      with:
        name: gitversion
        path: gitversion.json

  build:
    name: Build
    needs: generateVersionInfo
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-dotnet@master
      with:
        dotnet-version: '3.1.100'
    - uses: actions/download-artifact@v1
      with:
        name: gitversion
        path: ./
    - run: Get-Content gitversion.json | ConvertFrom-Json | ForEach-Object { foreach ($item in $_.PSObject.properties) { "::set-env name=GitVersion_$($item.Name)::$item.Value" } }
    - run: 'Get-ChildItem env:'
    - run: dotnet build -c Release

  test:
    name: Test
    needs: [build, generateVersionInfo]
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-dotnet@master
      with:
        dotnet-version: '3.1.100'
    - uses: actions/download-artifact@v1
      with:
        name: gitversion
        path: ./
    - run: Get-Content gitversion.json | ConvertFrom-Json | ForEach-Object { foreach ($item in $_.PSObject.properties) { "::set-env name=GitVersion_$($item.Name)::$item.Value" } }
    - run: dotnet test -c Release -p:ParallelizeTestCollections=false

  # publish:
  #   name: Publish
  #   needs: [test, generateVersionInfo]
  #   runs-on: windows-latest
  #   steps:
  #   - uses: actions/checkout@v2
  #   - uses: actions/setup-dotnet@master
  #     with:
  #       dotnet-version: '3.1.100'
    # - uses: actions/download-artifact@v1
    #     with:
    #       name: gitversion
    #       path: ./
  #   - run: $env:OWNER = Split-Path -Path $env:GITHUB_REPOSITORY
  #   - run: Get-Content gitversion.json | ConvertFrom-Json | ForEach-Object { foreach ($item in $_.PSObject.properties) { "::set-env name=GitVersion_$($item.Name)::$item.Value" } }
  #   - run: dotnet build -c Release
  #   - run: dotnet nuget push ./src/GraphQL.Primitives/bin/Release/GraphQL.Primitives.*.nupkg --user $env:GITHUB_ACTOR --password ${{ secrets.GITHUB_TOKEN }} --source https://nuget.pkg.github.com/$env:OWNER/index.json
  #   - run: dotnet nuget push ./src/GraphQL.Client/bin/Release/GraphQL.Client.*.nupkg --user $env:GITHUB_ACTOR --password ${{ secrets.GITHUB_TOKEN }} --source https://nuget.pkg.github.com/$env:OWNER/index.json
  #   - run: dotnet nuget push ./src/GraphQL.Client.Http/bin/Release/GraphQL.Client.Http.*.nupkg --user $env:GITHUB_ACTOR --password ${{ secrets.GITHUB_TOKEN }} --source https://nuget.pkg.github.com/$env:OWNER/index.json
